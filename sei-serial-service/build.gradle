apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.google.cloud.tools.jib"

// 扩展定义
ext {
    // 启动类
    MainClass = 'com.changhong.sei.serial.SerialRestApplication'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {

    compile project(":sei-serial-sdk")
    compile project(":sei-serial-api")

    compile(
            "mysql:mysql-connector-java:$mysqlVersion",
            "org.modelmapper:modelmapper:$modelmapper_version",
            "org.modelmapper:modelmapper:$modelmapper_version",
            "com.changhong.sei:sei-service-starter:$sei_version",
            "com.changhong.sei:sei-mq-starter:$sei_version",
            'redis.clients:jedis',
            'org.apache.commons:commons-pool2'
    )

    testCompile(
            "com.changhong.sei:sei-test-starter:$sei_version"
    )
}

// 默认application文件中的配置从配置中心获取
processResources {
    excludes = ["**/application.yaml", "**/application.properties"]
}

//打ar包
bootJar  {
    enabled = true
    archiveName = 'sei-serial.jar'
    mainClassName = MainClass
    manifest {
        attributes("Manifest-Version": "6.0")
        attributes("Created-By": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString())
        attributes("Implementation-Title": "$project.name")
        attributes("Implementation-Version": "$project.version")
        attributes("Implementation-Vendor": "rcsit.cn")
        attributes("Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
    }
}

//上传到nexus
uploadArchives {
    enabled = false
}

install {
    enabled = false
}

// 打镜像
jib {
    // 拉取的镜像的配置
    from {
        image = 'java:8-jdk-alpine'
    }
    // 要生成的镜像的配置
    to {
        image = "$docker_registry_url/$docker_registry_namespace/$rootProject.name"
        tags = ["${project.version}".toString(), 'latest']

        auth {
            username = "${docker_registry_username}"
            password = "${docker_registry_password}"
        }
    }
    container {
        // 容器创建时间用
        creationTime = 'USE_CURRENT_TIMESTAMP'
        // jvmFlgs: JVM 容器的参数，和 Dockerfile 的 ENTRYPOINT作用相同
        jvmFlags = [
                '-Djava.security.egd=file:/dev/./urandom',
                '-Dfile.encoding=utf-8',
                '-Duser.timezone=GMT+08'
        ]
        // jvmFlags = ['-Xms512m', '-Xdebug', '-Xmy:flag=jib-rules']
        // 启动类限定名
        mainClass = MainClass
        // 容器暴露的端口，和 Dockerfile 的EXPOSE作用相同
        ports = ['8080']
    }
    // 如果私有镜像仓库没有启用https，设置allowInsecureRegistries参数为true
    allowInsecureRegistries = true
}
